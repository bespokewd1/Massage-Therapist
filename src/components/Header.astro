---
import navData from '@data/navData.json';
import { Icon } from 'astro-icon/components';
import DarkModeToggle from '@components/DarkModeToggle.astro';
import MainLogo from '@assets/images/logo/updated-logo.png';
import { Image } from 'astro:assets';

import type { HTMLAttributes } from 'astro/types';

interface Props extends HTMLAttributes<'header'> {}

const props = Astro.props as Props;
---

<!-- ============================================ --><!--                 Navigation                   --><!-- ============================================ --><!--Banner at the Top - Display on Mobile -->
<style>
  @import url('https://fonts.googleapis.com/css2?family=Poppins&display=swap');
</style>
<header id="cs-navigation" {...props}>
  <!-- Fixed Announcement Bar -->
    <!-- Fixed Announcement Bar -->
    <div
            id="announcement-bar"
            class="fixed top-0 left-0 z-50 flex h-10 w-full items-center overflow-hidden px-3 py-2 gap-2
         bg-gradient-to-r from-[#b80d64] via-[#f3117e] to-[#b80d64]
         text-white/95 backdrop-blur-sm
         border-b border-white/10
         dark:from-[#7a0a45] dark:via-[#a40e5e] dark:to-[#7a0a45] dark:text-white"
    >
        <!-- Track -->
        <div
                id="marquee-track"
                class="relative flex w-auto items-center will-change-transform
           touch-pan-x select-none"
                style=" --marquee-duration: 12s; --marquee-gap: 2rem; "
        >
            <!-- Chunk (single copy) -->
            <div class="marquee-chunk flex items-center gap-2 pr-[var(--marquee-gap)] shrink-0">
                <!-- FREE pill -->
                <span
                        class="flex items-center rounded-full bg-white text-[#f3117e] font-semibold
               px-2 py-0.5 text-xs md:text-sm shadow-sm ring-1 ring-white/40"
                >
                FREE
              </span>

                <span class="hidden lg:inline">Add-On with Any 1-Hour Massage! Choose one:</span>
                <span class="block whitespace-nowrap lg:hidden">Add-On with Any 1-Hour Massage!</span>

                {[
                    'Hot Stone',
                    'Cupping',
                    'Foot Scrub',
                    'Neck Tension Release',
                ].map((item, idx) => (
                        <>
                            {idx > 0 && <span aria-hidden="true" class="opacity-80">•</span>}
                            <span
                                    class="flex whitespace-nowrap items-center rounded-full bg-white text-[#f3117e] font-semibold
                   px-2 py-0.5 text-xs md:text-sm shadow-sm ring-1 ring-white/40"
                            >
            {item}
          </span>
                        </>
                ))}
            </div>

            <!-- Duplicate chunk for seamless loop -->
            <div class="marquee-chunk flex items-center gap-2 pr-[var(--marquee-gap)] shrink-0 lg:hidden" aria-hidden="true">
      <span
              class="flex items-center rounded-full bg-white text-[#f3117e] font-semibold
               px-2 py-0.5 text-xs md:text-sm shadow-sm ring-1 ring-white/40"
      >
        FREE
      </span>

                <span class="hidden lg:inline">Add-On with Any 1-Hour Massage! Choose one:</span>
                <span class="block whitespace-nowrap lg:hidden">Add-On with Any 1-Hour Massage!</span>

                {[
                    'Hot Stone',
                    'Cupping',
                    'Foot Scrub',
                    'Neck Tension Release',
                ].map((item, idx) => (
                        <>
                            {idx > 0 && <span aria-hidden="true" class="opacity-80">•</span>}
                            <span
                                    class="flex whitespace-nowrap items-center rounded-full bg-white text-[#f3117e] font-semibold
                   px-2 py-0.5 text-xs md:text-sm shadow-sm ring-1 ring-white/40"
                            >
            {item}
          </span>
                        </>
                ))}
            </div>
        </div>
    </div>
    

  <!-- Push content below the fixed top bar -->
  <div class="pt-12 cs-container">
    <!-- Logo -->
    <a href="/" class="cs-logo dark:grayscale-0 dark:brightness" aria-label="back to home">
      <Image
        src={MainLogo}
        alt="Main logo massage"
        class="px-2 drop-shadow-lg max-w-[100px]"
      />
    </a>

    <!-- Navigation -->
    <nav class="cs-nav" role="navigation">
      <!-- Mobile Nav Toggle -->
      <button
        class="cs-toggle"
        id="mobile-menu-toggle"
        aria-expanded="false"
        aria-controls="cs-expanded-ul"
        aria-label="Toggle mobile menu."
      >
        <div class="cs-box" aria-hidden="true">
          <span class="cs-line cs-line1"></span>
          <span class="cs-line cs-line2"></span>
          <span class="cs-line cs-line3"></span>
        </div>
      </button>

      <!-- Navigation Items -->
      <div class="cs-ul-wrapper">
        <ul id="cs-expanded-ul" class="cs-ul lg:text-(--bodyTextColorWhite) lg:dark:text-(--bodyTextColorWhite)">
          {
            navData.map((entry) => (
              <li
                class:list={[
                  'cs-li',
                  { 'cs-dropdown': entry.children?.length > 0 },
                    'lg:text-(--bodyTextColorWhite) lg:dark:text-(--bodyTextColorWhite)'
                ]}
              >
                {entry.children?.length > 0 ? (
                  <button
                    aria-expanded="false"
                    aria-controls={`submenu-${entry.key}`}
                    class:list={[
                      'cs-li-link cs-dropdown-button',
                      { 'cs-active': Astro.url.pathname.includes(entry.url) },
                    'lg:text-(--bodyTextColorWhite) lg:dark:text-(--bodyTextColorWhite)'
                    ]}
                  >
                    {entry.key}
                    <Icon
                      name="mdi--caret"
                      class="cs-drop-icon font-bold"
                    />
                  </button>
                ) : (
                  <a
                    href={entry.url}
                    class:list={[
                      'cs-li-link',
                      { 'cs-active': Astro.url.pathname === entry.url },
                        'lg:text-(--bodyTextColorWhite) lg:dark:text-(--bodyTextColorWhite)'
                    ]}
                    aria-current={
                      Astro.url.pathname === entry.url ? 'page' : undefined
                    }
                  >
                    {entry.key}
                  </a>
                )}

                {entry.children?.length > 0 && (
                  <ul id={`submenu-${entry.key}`} class="cs-drop-ul">
                    {entry.children.length > 0 &&
                      entry.children.map((child) => (
                        <li class="cs-drop-li">
                          <a
                            href={child.url}
                            class="cs-li-link cs-drop-link lg:text-(--bodyTextColorWhite) lg:dark:text-(--bodyTextColorWhite)"
                            aria-current={
                              Astro.url.pathname === child.url
                                ? 'page'
                                : undefined
                            }
                          >
                            {child.key}
                          </a>
                        </li>
                      ))}
                  </ul>
                )}
              </li>
            ))
          }

          <!-- Book Online Button -->
          <li>
            <button
              onclick="document.getElementById('popup').classList.remove('hidden')"
              class="cs-button-solid flex justify-center items-center leading-none"
            >
              Book Online
            </button>
          </li>
        </ul>
      </div>
    </nav>

    <!-- Dark Mode Toggle -->
    <div class="dark-mode-wrapper">
      <DarkModeToggle />
    </div>
  </div>
</header>
<!-- Popup Overlay -->
<div
  id="popup"
  class="fixed inset-0 bg-black/40 backdrop-blur-sm flex items-center justify-center z-[9999] hidden"
>
  <div
    class="p-6 rounded-xl shadow-xl w-11/12 max-w-md"
    style="background: rgba(255, 255, 255, 0.3);"
  >
    <div class="flex flex-col gap-4">
      <a
        href="https://www.massagebook.com/therapists/StoneMassage?src=external"
        class="cs-button-solid rounded-full text-center text-white leading-snug p-4 text-[.6rem] md:text-[1rem]"
      >
        Book In-Clinic Appointment (Online)
      </a>
      <a
        href="tel:587-938-0458"
        class="cs-button-solid rounded-full text-center text-white leading-snug p-4 text-[.6rem] md:text-[1rem]"
      >
        Call to Book In-Home Massage
      </a>
      <button
        onclick="document.getElementById('popup').classList.add('hidden')"
        class="text-sm text-white-500 hover:text-white mt-2"
      >
        Close
      </button>
    </div>
  </div>
</div>

<style lang="less">
  /*-- -------------------------- -->
<---     Mobile Navigation      -->
<--- -------------------------- -*/

  /* Mobile - 1023px */
  @media only screen and (max-width: 63.9375rem) {
    body {
      &.cs-open {
        overflow: hidden;
      }
    }

    #cs-navigation {
      /* remove the font family so the Stitch inherits the fonts from your global stylesheet */
      font-family: 'Poppins', sans-serif;
      font-weight: bold;

      width: 100%;
      /* prevents padding from affecting height and width */
      box-sizing: border-box;
      padding: (12/16rem) (16/16rem);
      /*background-color: rgba(var(--primary-rgb), 0.3);*/
      background: #e685a8;
      background: linear-gradient(90deg, rgba(230, 133, 168, 1) 0%, rgba(243, 17, 126, 1) 52%, rgba(240, 151, 184, 1) 100%);
      /*backdrop-filter: blur(30px);*/
      box-shadow: rgba(149, 157, 165, 0.2) 0px 8px 24px;
      position: fixed;
      z-index: 10000;

      &:before {
        /* black blurred overlay */
        content: '';
        width: 0%;
        height: 100vh;
        background: rgba(0, 0, 0, 0.6);
        opacity: 0;
        display: block;
        position: absolute;
        top: 100%;
        right: 0;
        z-index: -11;
        transition:
          width 0.5s,
          opacity 0.3s;
        -webkit-backdrop-filter: blur(10px);
        backdrop-filter: blur(10px);
      }

      &.cs-active {
        &:before {
          width: 100%;
          opacity: 1;
        }

        .cs-ul-wrapper {
          opacity: 1;
          visibility: visible;
          transform: scaleX(1);
          transition-delay: 0.2s;
        }

        .cs-li {
          opacity: 1;
          transform: translateX(0);
        }
      }

      .cs-container {
        width: 100%;
        display: grid;
        /* justify-content: flex-end;
        align-items: center; */
        grid-template-areas: 'logo theme nav';
        grid-template-columns: 1fr auto auto;
        place-content: center;
      }
      .dark-mode-wrapper {
        grid-area: theme;
        position: relative;
      }

      .cs-nav {
        grid-area: nav;
        place-self: center;
      }

      .cs-button-solid {
        color: var(--bodyTextColorWhite);
        border-radius: calc(32 / 16 * 1rem);
        &:before {
          border-radius: calc(32 / 16 * 1rem);
        }
      }

      .cs-logo {
        grid-area: logo;
        width: 100%;
        max-width: (146/16rem);
        height: 100%;
        margin: 0 auto 0 0;
        /* prevents padding from affecting height and width */
        box-sizing: border-box;
        padding: 0;
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 10;

        svg {
          width: 100%;
          height: 100%;
          /* ensures the image never overflows the container. It stays contained within it's width and height and expands to fill it then stops once it reaches an edge */
          object-fit: contain;
          /* places the image to the left edge of the parent */
          object-position: left;
        }
      }

      .cs-toggle {
        /* 44px - 48px */
        width: clamp(2.75rem, 6vw, 3rem);
        height: clamp(2.75rem, 6vw, 3rem);
        margin: 0 0 0 auto;
        background-color: transparent;
        border: none;
        border-radius: (4/16rem);
        display: flex;
        justify-content: center;
        align-items: center;
      }

      .cs-active {
        .cs-line1 {
          top: 50%;
          transform: translate(-50%, -50%) rotate(225deg);
        }

        .cs-line2 {
          top: 50%;
          transform: translate(-50%, -50%) translateY(0) rotate(-225deg);
          transform-origin: center;
        }

        .cs-line3 {
          opacity: 0;
          bottom: 100%;
        }
      }

      .cs-box {
        /* 24px - 28px */
        width: clamp(1.5rem, 2vw, 1.75rem);
        /* 14px - 16px */
        height: clamp(0.875rem, 1.5vw, 1rem);
        position: relative;
      }

      .cs-line {
        width: 100%;
        height: 2px;
        background-color: #1a1a1a;
        border-radius: 2px;
        position: absolute;
        left: 50%;
        transform: translateX(-50%);
      }

      .cs-line1 {
        top: 0;
        transition:
          transform 0.5s,
          top 0.3s,
          left 0.3s;
        animation-duration: 0.7s;
        animation-timing-function: ease;
        animation-direction: normal;
        animation-fill-mode: forwards;
        transform-origin: center;
      }

      .cs-line2 {
        top: 50%;
        transform: translateX(-50%) translateY(-50%);
        transition:
          top 0.3s,
          left 0.3s,
          transform 0.5s;
        animation-duration: 0.7s;
        animation-timing-function: ease;
        animation-direction: normal;
        animation-fill-mode: forwards;
      }

      .cs-line3 {
        bottom: 0;
        transition:
          bottom 0.3s,
          opacity 0.3s;
      }

      .cs-ul-wrapper {
        height: 100vh;
        background-color: #fff;
        box-shadow: inset rgba(0, 0, 0, 0.2) 0px 8px 24px;
        opacity: 0;
        visibility: hidden;
        position: absolute;
        top: 100%;
        right: 0;
        left: auto;
        z-index: -1;
        overflow: hidden;
        transform: scaleX(0);
        transition:
          transform 0.4s,
          opacity 0.3s;
        transform-origin: top right;
      }

      .cs-ul {
        width: auto;
        min-width: 40%;
        height: 65vh;
        margin: 0;
        /* 28px - 40px */
        padding: (48/16rem) clamp(1.75rem, 3vw, 2.5rem) (32/16rem) (70/16rem);
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        align-items: flex-end;
        gap: (20/16rem);
        overflow: scroll;
      }

      .cs-li {
        text-align: right;
        list-style: none;
        width: 100%;
        margin-right: 0;
        opacity: 0;
        /* transition from these values */
        transform: translateX(-40/16rem);
        transition:
          transform 0.6s,
          opacity 0.9s;

        &:nth-of-type(1) {
          transition-delay: 0.05s;
        }
        &:nth-of-type(2) {
          transition-delay: 0.1s;
        }
        &:nth-of-type(3) {
          transition-delay: 0.15s;
        }
        &:nth-of-type(4) {
          transition-delay: 0.2s;
        }
        &:nth-of-type(5) {
          transition-delay: 0.25s;
        }
        &:nth-of-type(6) {
          transition-delay: 0.3s;
        }
        &:nth-of-type(7) {
          transition-delay: 0.35s;
        }
        &:nth-of-type(8) {
          transition-delay: 0.4s;
        }
        &:nth-of-type(9) {
          transition-delay: 0.45s;
        }
      }

      .cs-li-link {
        /* 16px - 24px */
        font-size: clamp(1rem, 2.5vw, 1.5rem);
        color: inherit;
        line-height: 1.2em;
        text-decoration: none;
        margin: 0;
        display: inline-block;
        position: relative;

        &:before {
          /* active state underline */
          content: '';
          width: 100%;
          height: 1px;
          background: currentColor;
          opacity: 1;
          display: none;
          position: absolute;
          bottom: (-2/16rem);
          left: 0;
        }

        &.cs-active {
          &:before {
            display: block;
          }
        }
      }
    }
  }

  /* Dark Mode */
  @media only screen and (max-width: 63.9375rem) {
    body.dark-mode {
      #cs-navigation {
        .cs-logo {
          /* makes it white */
          filter: grayscale(1) brightness(1000%);
        }

        .cs-line {
          background-color: #fff;
        }

        .cs-ul-wrapper {
          background-color: var(--medium);
        }

        .cs-li-link {
          color: var(--bodyTextColorWhite);
        }
      }
    }
  }

  /*-- -------------------------- -->
<---     Navigation Dropdown    -->
<--- -------------------------- -*/

  /* Mobile - 1023px */
  @media only screen and (max-width: 63.9375rem) {
    #cs-navigation {
      .cs-dropdown {
        color: var(--bodyTextColorWhite);
        color: var(--headerColor);

        position: relative;

        &.cs-active {
          .cs-drop-ul {
            height: auto;
            margin: (12/16rem) 0 0 0;
            padding: (24/16rem);
            opacity: 1;
            visibility: visible;
            transform: scale(1);
          }

          .cs-drop-link {
            opacity: 1;
          }

          .cs-drop-icon {
            transform: rotate(0);
          }
        }

        .cs-li-link {
          position: relative;
          transition: opacity 0.3s;
        }
      }

      .cs-drop-icon {
        width: (15/16rem);
        height: auto;
        display: inline-block;
        color: inherit;
        transform: rotate(180deg);
        transition: 0.3s;
      }

      .cs-drop-ul {
        width: 100%;
        height: 0;
        margin: 0;
        box-sizing: border-box;
        padding: 0 (24/16rem) 0 (24/16rem);
        background-color: var(--primary);
        opacity: 0;
        display: flex;
        visibility: hidden;
        flex-direction: column;
        justify-content: flex-start;
        align-items: flex-end;
        gap: (12/16rem);
        overflow: hidden;
        transform: scale(0);
        transition:
          padding 0.3s,
          margin 0.3s,
          height 0.3s,
          opacity 0.3s,
          transform 0.3s,
          visibility 0.3s;
        transform-origin: top right;
      }

      .cs-drop-li {
        text-align: inherit;
        list-style: none;
      }

      .cs-li-link {
        &.cs-drop-link {
          /* 14px - 16px */
          font-size: clamp(0.875rem, 2vw, 1.25rem);
          color: #fff;
        }
      }

      .cs-dropdown-button {
        background-color: transparent;
        border: none;
        appearance: none;
      }
    }
  }

  /* Desktop - 1024px */
  @media only screen and (min-width: 64rem) {
    #cs-navigation {
      .cs-dropdown {
        position: relative;
        &:hover,
        &.cs-active {
          cursor: pointer;
          .cs-drop-ul {
            opacity: 1;
            visibility: visible;
            transform: scaleY(1);
          }

          .cs-drop-li {
            opacity: 1;
            transform: translateY(0);
          }
        }
      }

      .cs-dropdown:has(.cs-drop-icon) {
        display: flex;
        align-items: center;
        &:hover {
          .cs-drop-icon {
            transform: rotate(0);
          }
        }
      }

      .cs-drop-icon {
        width: (15/16rem);
        height: auto;
        display: inline-block;
        color: inherit;
        transform: rotate(180deg);
        transition: 0.3s;
      }

      .cs-drop-ul {
        min-width: (200/16rem);
        margin: 0;
        padding: 0;
        background-color: #fff;
        box-shadow: rgba(149, 157, 165, 0.2) 0px 10px 16px;
        opacity: 0;
        border-bottom: 5px solid var(--primary);
        visibility: hidden;
        /* if you have 8 or more links in your dropdown nav, uncomment the columns property to make the list into 2 even columns. Change it to 3 or 4 if you need extra columns. Then remove the transition delays on the cs-drop-li so they don't have weird scattered animations */
        // columns: 2;
        position: absolute;
        top: 100%;
        z-index: -100;
        overflow: hidden;
        transform: scaleY(0);
        transition:
          transform 0.3s,
          visibility 0.3s,
          opacity 0.3s;
        transform-origin: top;
      }

      .cs-drop-li {
        font-size: (16/16rem);
        text-decoration: none;
        list-style: none;
        width: 100%;
        height: auto;
        color: var(--bodyTextColor);
        opacity: 0;
        display: block;
        transform: translateY(-10/16rem);
        transition:
          opacity 0.6s,
          transform 0.6s;

        &:nth-of-type(1) {
          transition-delay: 0.05s;
        }
        &:nth-of-type(2) {
          transition-delay: 0.1s;
        }
        &:nth-of-type(3) {
          transition-delay: 0.15s;
        }
        &:nth-of-type(4) {
          transition-delay: 0.2s;
        }
        &:nth-of-type(5) {
          transition-delay: 0.25s;
        }
        &:nth-of-type(6) {
          transition-delay: 0.3s;
        }
        &:nth-of-type(7) {
          transition-delay: 0.35s;
        }
        &:nth-of-type(8) {
          transition-delay: 0.4s;
        }
        &:nth-of-type(9) {
          transition-delay: 0.45s;
        }
        &:nth-of-type(10) {
          transition-delay: 0.5s;
        }
        &:nth-of-type(11) {
          transition-delay: 0.55s;
        }
        &:nth-of-type(12) {
          transition-delay: 0.6s;
        }
        &:nth-of-type(13) {
          transition-delay: 0.65s;
        }
      }

      .cs-li-link {
        &.cs-drop-link {
          font-size: (16/16rem);
          line-height: 1.5em;
          text-decoration: none;
          white-space: nowrap;
          width: 100%;
          /* prevents padding from affecting height and width */
          box-sizing: border-box;
          padding: (12/16rem);
          //color: var(--bodyTextColor);
          color: black;
          display: block;
          transition:
            color 0.3s,
            background-color 0.3s;

          &:hover {
            background-color: #f7f7f7;
          }

          &:focus-within {
            outline: 2px solid currentColor;
            outline-offset: -2px;
          }

          &:before {
            display: none;
          }
        }
      }

      .cs-dropdown-button {
        background-color: transparent;
        border: none;
        appearance: none;
      }
      .cs-button-solid {
        color: var(--bodyTextColorWhite);
        border-radius: calc(32 / 16 * 1rem);
        &:before {
          border-radius: calc(32 / 16 * 1rem);
        }
      }
    }
  }

  /* Dark Mode */
  @media only screen and (min-width: 0rem) {
    body.dark-mode {
      #cs-navigation {
        .cs-drop-ul {
          background-color: var(--dark);
        }

        .cs-li-link {
          &.cs-drop-link {
            &:hover {
              background-color: var(--medium);
            }
          }
        }

        .cs-drop-icon {
          /* turns it white */
          filter: grayscale(1) brightness(1000%);
        }
      }
    }
  }

  /*-- -------------------------- -->
<---     Desktop Navigation     -->
<--- -------------------------- -*/

  /* Small Desktop - 1024px */
  @media only screen and (min-width: 64rem) {
    #cs-navigation {
      /* remove the font family so the Stitch inherits the fonts from your global stylesheet */
      font-family: 'Poppins', sans-serif;
      font-weight: 400;
      /*font-size: bold;*/
      letter-spacing: 0.05rem;
      width: 100%;
      /* prevents padding from affecting height and width */
      box-sizing: border-box;
      padding: 0 (16/16rem);
      //  background-color: #fff;
      /*background-color: rgba(var(--primary-rgb), 0.3);*/
      /*backdrop-filter: blur(30px);*/
      background: #e685a8;
      background: linear-gradient(90deg, rgba(230, 133, 168, 1) 0%, rgba(243, 17, 126, 1) 52%, rgba(240, 151, 184, 1) 100%);
      box-shadow: rgba(149, 157, 165, 0.2) 0px 8px 24px;
      position: fixed;
      z-index: 10000;

      .cs-container {
        width: 100%;
        max-width: (1280/16rem);
        margin: auto;
        display: flex;
        justify-content: flex-end;
        align-items: center;
        gap: (24/16rem);
      }

      .cs-toggle {
        display: none;
      }

      .cs-logo {
        width: 18.4%;
        max-width: (350/16rem);
        height: (65/16rem);
        /* margin-right auto pushes everything away from it to the right */
        margin: 0 auto 0 0;
        padding: 0;
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 100;

        svg {
          width: 100%;
          height: 100%;
          /* ensures the image never overflows the container. It stays contained within it's width and height and expands to fill it then stops once it reaches an edge */
          object-fit: contain;
        }
      }

      .cs-ul {
        width: 100%;
        margin: 0;
        padding: 0;
        display: flex;
        justify-content: flex-start;
        align-items: center;
        /* 20px - 36px */
        gap: clamp(1.25rem, 2.6vw, 2.25rem);
      }

      .cs-li {
        list-style: none;
        padding: (32/16rem) 0;
        /* prevent flexbox from squishing it */
        flex: none;
      }

      .cs-li-link {
        /* 14px - 16px */
        font-size: clamp(0.875rem, 1vw, 1rem);
        line-height: 1.5em;
        text-decoration: none;
        margin: 0;
        //color: var(--bodyTextColor);
        color: black;
        display: block;
        position: relative;
        &:hover {
          &:before {
            width: 100%;
          }
        }

        &.cs-active {
          &:before {
            width: 100%;
          }
        }

        &:before {
          /* active state underline */
          content: '';
          width: 0%;
          height: 2px;
          background: var(--primaryLight);
          opacity: 1;
          display: block;
          position: absolute;
          bottom: (0/16rem);
          left: 0;
          transition: width 0.3s;
        }
      }
    }
  }

  /* Dark Mode */
  @media only screen and (min-width: 64rem) {
    body.dark-mode {
      #cs-navigation {
        .cs-logo {
          /* makes it turn white */
          filter: grayscale(1) brightness(1000%);
        }

        .cs-li-link {
          color: var(--bodyTextColorWhite);
        }

        .cs-li-link {
          &:before {
            background-color: var(--primaryLight);
          }
        }
      }
    }
  }
  @keyframes scroll {
    0% {
      transform: translateX(100%);
    }
    100% {
      transform: translateX(-100%);
    }
  }

  /* Animation: start in-view at 0, then slide left by one chunk width */
  @keyframes marquee-slide-left {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(calc(-1 * var(--chunk-width)));
    }
  }

  /* Animate only on tablet/mobile; desktop remains static */
  @media (max-width: 64rem) { /* <= 1024px */
    #announcement-bar #marquee-track {
      animation: marquee-slide-left var(--marquee-duration) linear infinite;
    }

    /* Pause on hover/focus (desktop when hovering within this range) */
    #announcement-bar #marquee-track:hover,
    #announcement-bar #marquee-track:focus-within {
      animation-play-state: paused;
    }
  }

  /* Respect reduced motion: no animation */
  @media (prefers-reduced-motion: reduce) {
    #announcement-bar #marquee-track {
      animation: none !important;
      transform: none !important;
    }
  }
</style>

<script>
  // Measure one chunk width and set CSS var on the track
  function initMarquee() {
    const track = document.getElementById('marquee-track');
    if (!track) return;
    const chunks = track.querySelectorAll('.marquee-chunk');
    if (!chunks.length) return;

    // Measure the first chunk including the gap padding
    const first = chunks[0];

    const measure = () => {
      // Important: force layout after fonts load
      const rect = first.getBoundingClientRect();
      // Use exact pixel width for precise loop
      const width = Math.ceil(rect.width);
      track.style.setProperty('--chunk-width', width + 'px');
    };

    // Initial measure after fonts may be ready
    if (document.fonts && document.fonts.ready) {
      document.fonts.ready.then(measure).catch(measure);
    } else {
      // Fallback
      requestAnimationFrame(measure);
    }

    // Recalculate on resize (debounced)
    let rafId:number|null = null;
    const onResize = () => {
      if (rafId) cancelAnimationFrame(rafId);
      rafId = requestAnimationFrame(measure);
    };
    window.addEventListener('resize', onResize, { passive: true });

    // Observe content changes in case offers change dynamically
    const mo = new MutationObserver(() => {
      requestAnimationFrame(measure);
    });
    mo.observe(first, { childList: true, subtree: true, characterData: true });

    // Optional: recalc when images load inside the chunk (if any in future)
    first.querySelectorAll('img').forEach((img) => {
      if (!img.complete) img.addEventListener('load', measure, { once: true });
    });
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initMarquee, { once: true });
  } else {
    initMarquee();
  }
</script>
